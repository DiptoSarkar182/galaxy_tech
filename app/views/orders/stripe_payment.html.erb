<div id="toast" style="display: none; position: fixed; top: 20px; right: 20px; background: #4CAF50; color: white; padding: 15px; border-radius: 4px;">
  Payment successful!
</div>

<div class="bg-white shadow-md rounded-lg px-8 py-6 mx-auto max-w-lg">
  <div style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin-bottom: 20px;">
    <strong>Note:</strong> This payment system is currently in <strong>Stripe test mode</strong>. No real transactions will be processed. To test the payment system, you can use the test card number <code>4242424242424242</code> with any future expiry date and any three-digit CVC code.
  </div>
  <h1 class="text-2xl font-bold mb-6 text-center">Your Order</h1>
  <p class="text-gray-700 mb-8 text-center">Total Price: <%= number_to_currency(@total_price, unit: 'USD ', format: "%n %u") %></p>

  <%= form_with url: submit_stripe_payment_orders_path, id: "payment-form", method: :post, class: "space-y-6" do |form| %>
    <div class="form-row">
      <label for="card-element" class="block text-sm font-medium text-gray-700">
        Credit or debit card
      </label>
      <div id="card-element" class="mt-1 p-4 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"></div>
      <div id="card-errors" role="alert" class="text-sm text-red-500 mt-2"></div>
    </div>

    <div id="loading-spinner" class="hidden">
      <p class="text-gray-700 text-center">Loading...</p>
    </div>

    <%= hidden_field_tag :order_id, @order.id %>
    <div class="text-center">
      <%= form.submit "Pay", class: "inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" %>
    </div>
  <% end %>
</div>

<script>
    // Create a Stripe client.
    var stripe = Stripe('<%= ENV["STRIPE_PUBLISHABLE_KEY"] %>');

    // Create an instance of Elements.
    var elements = stripe.elements();

    // Create an instance of the card Element.
    var card = elements.create('card');

    // Add an instance of the card Element into the `card-element` <div>.
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element.
    var cardError = null; // Add this line
    card.addEventListener('change', function(event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    });

    // Handle form submission.
    var form = document.getElementById('payment-form');
    form.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the form from being submitted by default

        var submitButton = form.querySelector('[type="submit"]');
        var loadingSpinner = document.getElementById('loading-spinner');

        submitButton.disabled = true;
        loadingSpinner.style.display = 'block'; // Show the loading spinner

        stripe.createToken(card).then(function(result) {
            if (result.error) {
                // Inform the user if there was an error.
                var errorElement = document.getElementById('card-errors');
                errorElement.textContent = result.error.message;
                submitButton.disabled = false;
                loadingSpinner.style.display = 'none'; // Hide the loading spinner
            } else {
                // Send the token to your server.
                stripeTokenHandler(result.token);
            }
        });
    });




    // Submit the form with the token ID.
    function stripeTokenHandler(token) {
        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('payment-form');
        var hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'stripeToken');
        hiddenInput.setAttribute('value', token.id);
        form.appendChild(hiddenInput);

        // Get the CSRF token
        var csrfToken = document.querySelector('[name="csrf-token"]').getAttribute('content');

        // Create a new FormData object
        var formData = new FormData(form);
        formData.append('authenticity_token', csrfToken);

        // Submit the form
        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRF-Token': csrfToken
            },
            credentials: 'same-origin'
        }).then(function(response) {
            if (!response.ok) {
                document.getElementById('loading-spinner').style.display = 'none';
                // If the payment fails, the server will respond with a 422 status code and the error message
                return response.text().then(function(message) {
                    throw new Error(message);
                });
            }
            return response.text();
        }).then(function(data) {
            if (data === 'success') {
                document.getElementById('loading-spinner').style.display = 'none';
                var toast = document.getElementById('toast');
                toast.style.display = 'block';
                setTimeout(function() {
                    toast.style.display = 'none';
                    window.location.href = '/orders';
                }, 3000);
            }
        }).catch(function(error) {
            document.getElementById('loading-spinner').style.display = 'none';
            var submitButton = form.querySelector('[type="submit"]');
            submitButton.disabled = false;
            alert('Payment failed: ' + error.message);
        });
    }
</script>